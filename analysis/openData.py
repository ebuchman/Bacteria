import numpy as np
import os

def min_sep(a, b, w):
  ds = a-b
  if ds > 0.5*w:
    ds -= w
  elif ds < -0.5*w:
    ds += w

  return ds

def retrieve_data(path, mode = 1):
  #open data, retrieve cm's of agents
  
  #mode: 0 for cm, 1 for extended rods (must compute cm) 
  
  FILENAME = os.path.join(path, 'gnudat/time')
  DETAILS = os.path.join(path, 'pydat/details.txt')
  
  f = open(DETAILS, 'r')
  details = f.read()  
  f.close()

  details = eval(details)
  N = np.cast['int'](details['N'])
  r = np.cast['float'](details['r'])
  L = np.cast['int'](details['L'])
  RUN_TIME = np.cast['int'](details['run_time'])
  SKIP = np.cast['int'](details['skip'])
  WIDTH = np.cast['double'](details['frame_lim'])

  TIME_POINTS = int(RUN_TIME/SKIP)

  trajs = np.zeros((N, TIME_POINTS, 2)) #each row is a bacteria, each column a time point, 3rd dimension is (x,y)

  for i in xrange(TIME_POINTS):
    t = np.loadtxt((FILENAME+str(i)))

    for j in xrange(N):
      if mode == 0:
        # cm's are provided
        trajs[j,i][0] = t[L*j][0]
        trajs[j,i][1] = t[L*j][1]
      elif mode == 1:
        if L%2 == 0:
          #cm's must be computed from balls surrounding the centre (even number of balls)
          dx = min_sep(t[L*j + L/2][0] , t[L*j + L/2-1][0], WIDTH)
          dy = min_sep(t[L*j + L/2][1] , t[L*j + L/2-1][1], WIDTH)
          th = np.angle(dx + dy*1j)
          
          trajs[j,i][0] = (t[L*j + L/2-1][0] + r*np.cos(th))%WIDTH
          trajs[j,i][1] = (t[L*j + L/2-1][1] + r*np.sin(th))%WIDTH
        else:
          # cm is center ball
          trajs[j,i][0] = t[L*j + int(L/2)][0]
          trajs[j,i][1] = t[L*j + int(L/2)][1]

  return trajs, details



#######################################################################################
# What follows is for opening data generated by MDc.  It is mostly for cross validating
# It's essentially useless ...
#######################################################################################

def open_file(filename, mode = None, sep = None):
  f = open(filename, 'r')
  if mode == 'np':
    data = np.fromfile(f, sep=sep)
  else:
    data = f.read()
  f.close()
  return data

def retrieve_data_2():
  PATH = '../old_code/MDc/'
  cm_x_traj = open_file(PATH+'cm_x_traj.txt', mode='np', sep = ',')
  cm_y_traj = open_file(PATH+'cm_y_traj.txt', mode='np', sep =',')
    
  details = eval(open_file(PATH+'details.txt', sep=None))

  N = np.cast['int'](details['N'])
  r = np.cast['float'](details['r'])
  L = np.cast['int'](details['L'])
  RUN_TIME = np.cast['int'](details['run_time'])
  WIDTH = np.cast['double'](details['frame_lim'])
  
  #TIME_POINTS = int(RUN_TIME)
  TIME_POINTS = len(cm_x_traj)/N
  trajs = np.zeros((N, TIME_POINTS, 2)) #each row is a bacteria, each column a time point, 3rd dimension is (x,y)
  for i in xrange(N):
    trajs[i, :, 0] = cm_x_traj[np.arange(i, TIME_POINTS*N, N)]

  return trajs



